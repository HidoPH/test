print("LOL")
local Consumables = workspace.Consumables
local Player = game.Players.LocalPlayer
local Plates = game:GetService("ReplicatedStorage").Assets.Plates
local RSConsumables = game:GetService("ReplicatedStorage").Assets.Consumables
local MarketPlace = game.MarketplaceService
function GetTablePlate()
	local Seat = GetSeat()
	local Plate
	if Seat then
		Plate = Seat:FindFirstChild("Plate")
	end
	return Plate
end

function GetSeat()
	local Seat
	if Player.Character and Player.Character:FindFirstChild("Humanoid") and Player.Character.Humanoid.Sit and Player.Character.Humanoid.SeatPart then
		Seat = Player.Character.Humanoid.SeatPart
	end
	return Seat
end

function GetTable()
	local Seat = GetSeat()
	local Table
	if Seat then
		Table = Seat:FindFirstAncestor("Table")
	end
	return Table
end

function GetNumberAttributes(c)
	local count = 0
	for i,v in pairs(c:GetAttributes()) do
		count = count+1
	end
	return count
end

function GetAttributeFromNumber(c,n)
	local count = 0
	for i,v in pairs(c:GetAttributes()) do
		count = count+1
		if count == n then
			return v
		end
	end
end

function Compare(o,t)
	if o == "Common" then
		if t~="Common" then
			return true
		end
	elseif o == "Uncommon" then
		if t == "Rare" then
			return true
		elseif t == "Legendary" then
			return true
		elseif t == "Mythic" then
			return true
		end
	elseif o == "Rare" then
		if t == "Legendary" then
			return true
		elseif t == "Mythic" then
			return true
		end
	elseif o == "Legendary" then
		if t == "Mythic" then
			return true
		end
	end
	return false
end

function GetNumberOfSpots(handle)
	local count = 0
	for i,v in pairs(handle:GetChildren()) do
		if tonumber(v.Name) then
			count =count +1
		end
	end
	return count
end
function CheckIfAllFilled(handle)
	for i,v in pairs(handle:GetChildren()) do
		if tonumber(v.Name) and (not v:GetAttribute("Occupied") or (v:GetAttribute("Occupied") and v:GetAttribute("Occupied") == false)) then
			return false
		end
	end
	return true
end

function GrabFood(handle)
	for i=1,GetNumberOfSpots(handle) do
		local spot = handle[tostring(i)]
		if not spot:GetAttribute("Occupied") or (spot:GetAttribute("Occupied") and spot:GetAttribute("Occupied") == false) then
			local t= os.time()
			GetFood(handle)
			repeat wait()
				if (os.time()-t >=1) and (not spot:GetAttribute("Occupied") or (spot:GetAttribute("Occupied") and spot:GetAttribute("Occupied") == false)) then
					t= os.time()
					GetFood(handle)
				end
			until spot:GetAttribute("Occupied") and spot:GetAttribute("Occupied") == true
		end
	end
	wait()
end

function FillPlates()
	if Player.Character:FindFirstChildWhichIsA("Tool") and Player.Character:FindFirstChildWhichIsA("Tool"):FindFirstChild("1",true) then
		local handle = Player.Character:FindFirstChildWhichIsA("Tool").Handle
		if not CheckIfAllFilled(handle) then
			GrabFood(handle)
		end
	end
	for i,v in pairs(Player.Backpack:GetChildren()) do
		if v.Handle:FindFirstChild("1") then
			if not CheckIfAllFilled(v.Handle) then
				Player.Character.Humanoid:EquipTool(v)
				wait()
				GrabFood(v.Handle)
			end
		end
	end
end

function GetPlate(num)
	local Inventory = game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.7.0"].knit.Services.MoneyService.RF.ReturnInventory:InvokeServer()
	local MyPlate
	local Rarity
	for i,v in pairs(Inventory.Plate) do
		if MyPlate and Rarity then
			if Plates:FindFirstChild(i) and Compare(Rarity,Plates[i]:GetAttribute("Rarity")) then
				Rarity = Plates[i]:GetAttribute("Rarity")
				MyPlate = i
			end
		else
			MyPlate = i
			Rarity = Plates[MyPlate]:GetAttribute("Rarity")
		end
	end
	if num and tonumber(num) then
		if #Player.Backpack:GetChildren()>=9 then
			return
		end
		if #Player.Backpack:GetChildren() + num >9 then
			num = - 9 - #Player.Backpack:GetChildren() 
		end
		for i=1,num do
			game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.7.0"].knit.Services.InventoryService.RF.AddToBackpack(MyPlate)
		end
	else
		if #Player.Backpack:GetChildren()>=9 then
			return
		end
		game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.7.0"].knit.Services.InventoryService.RF.AddToBackpack(MyPlate)
	end
end

function GetSurfacePosition(part)
	local RNG = Random.new()
	local size = part.Size
	local x = size.x/2
	local y = size.y/2
	local z = size.z/2
	local pos = part.Position
	local cf = part.CFrame
	local ray = Ray.new(Vector3.new(pos.x,pos.y+y+0.01,pos.z),Vector3.new(0,-0.01,0))
	local part2,posy,surfacepos = workspace:FindPartOnRayWithWhitelist(ray,{part})

	local sizex = RNG:NextNumber(-x,x)
	local sizez = RNG:NextNumber(-z,z)
	local newposx = pos.x+sizex
	local newposz = pos.z+ sizez

	--posy = posy + (v38.PrimaryPart.Size/2)
	local mycf = CFrame.new(newposx,posy.y,newposz) * CFrame.Angles(math.rad(0), math.rad(0), math.rad(0))
	return mycf
end

function GetNumberOfPlateAreas(Table)
	local count = 0
	for i,v in pairs(Table:GetChildren()) do
		if v.Name == "PlateArea" then
			count = count+1
		end
	end
	return count
end

function GetPlateAreaFromNumber(Table,num) 
	local count = 0
	for i,v in pairs(Table:GetChildren()) do
		if v.Name == "PlateArea" then
			count = count+1
			if num == count then
				return v
			end
		end
	end
end

function PlacePlate(tool)
	local platearea = GetRPlateArea()
	if platearea then
		local cf = GetSurfacePosition(platearea)
		if cf then
			local orientaion,size = tool:GetBoundingBox()
			local newcf = cf + Vector3.new(0,size.y/2,0)
			game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.7.0"].knit.Services.PlateService.RF.PlacePlate:InvokeServer(tool,platearea,cf)
		end
	end
end

function PlaceDownPlates()
	local tool = Player.Character:FindFirstChildWhichIsA("Tool")
	if tool then
		if tool.Handle:FindFirstChild("1") and tool.Handle:FindFirstChild("1"):GetAttribute("Occupied") and tool.Handle:FindFirstChild("1"):GetAttribute("Occupied") == true then
			PlacePlate(tool)
		end
	end
	for i,v in pairs(Player.Backpack:GetChildren()) do
		if v.Handle:FindFirstChild("1") and v.Handle:FindFirstChild("1"):GetAttribute("Occupied") and v.Handle:FindFirstChild("1"):GetAttribute("Occupied") == true then
			PlacePlate(v)
		end
	end
end

function GetRPlateArea()
	local Seat = GetSeat()
	local Table
	if Seat then
		Table = Seat:FindFirstAncestor("Table")
	end
	if Table then
		local numberofplateareas = GetNumberOfPlateAreas(Table)
		if numberofplateareas > 0 then
			local rnplate = math.random(1,numberofplateareas)
			return GetPlateAreaFromNumber(Table,rnplate)
		end
	end
end

function Validate(c)
	if not c then
		return false
	end
	local RSFood = RSConsumables:FindFirstChild(c.Name)
	if RSFood then
		if RSFood:GetAttribute("VIP") and RSFood:GetAttribute("VIP") == true then
			if MarketPlace:UserOwnsGamePassAsync(Player.UserId,817740770) then
				return true
			else
				return false
			end
		end
		return true
	end
	return false
end

function GetFood(handle)
	local Name 
	local RFood
	local VFood
	repeat wait()
		RFood = Consumables:GetChildren()[math.random(1,#Consumables:GetChildren())]
	until Validate(RFood)
	local GNC = GetNumberAttributes(RFood)
	if GNC > 1 then
		Name = GetAttributeFromNumber(RFood,math.random(1,GNC))
	else
		Name = RFood.Name
	end
	local tool = handle:FindFirstAncestorWhichIsA("Tool")
	if tool.Parent ~= Player.Character then
		Player.Character.Humanoid:EquipTool(tool)
	end
	game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.7.0"].knit.Services.IngredientService.RF.AddToPlate:InvokeServer(Name)
end

repeat wait()
	GetPlate(10)
	FillPlates()
	PlaceDownPlates()
until nil

--[[
repeat wait()
	local Table = GetTable()
	local Plate = GetTablePlate()
	local Fork = game.Players.LocalPlayer.Backpack:FindFirstChild("Fork") or game.Players.LocalPlayer.Character:FindFirstChild("Fork")

	if Fork then
		if Fork.Parent == game.Players.LocalPlayer.Backpack then
			Fork.Parent = game.Players.LocalPlayer.Character
		end
		if #Fork.Handle.Attachment:GetChildren() > 0 then
			game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.7.0"].knit.Services.ForkService.RF.ConsumableConsumed:InvokeServer(Fork.Handle.Attachment:GetChildren()[1])
		end
	end
	if Plate then
		local Food = Plate:FindFirstChild("Food",true)
		if Food then
			game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.7.0"].knit.Services.ForkService.RF.ConsumableInteracted:InvokeServer(Food:GetChildren()[1])
		else
			local Plates = Table.Plates
			local PlatesFood = Plates:FindFirstChild("Food",true)
			if PlatesFood then
				game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.7.0"].knit.Services.ForkService.RF.CookedInteracted:InvokeServer(PlatesFood)
			else
				game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.7.0"].knit.Services.ForkService.RF.CallWaiter:InvokeServer(PlatesFood)
			end
		end
	end
until os.time()-t>=10]]
