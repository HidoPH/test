local PathfindingService = game:GetService("PathfindingService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Consumables = workspace.Consumables
local path = PathfindingService:CreatePath()
local RSConsumables = game:GetService("ReplicatedStorage").Assets.Consumables
local player = Players.LocalPlayer
local Player = player
local character = player.Character
local humanoid = character:WaitForChild("Humanoid")
local MarketPlace = game.MarketplaceService
local OwnedGamepass
local waypoints
local nextWaypointIndex
local reachedConnection
local blockedConnection

local function followPath(destination)
	-- Compute the path
	local success, errorMessage = pcall(function()
		path:ComputeAsync(character.PrimaryPart.Position, destination)
	end)

	if success and path.Status == Enum.PathStatus.Success then
		-- Get the path waypoints
		waypoints = path:GetWaypoints()

		-- Detect if path becomes blocked
		blockedConnection = path.Blocked:Connect(function(blockedWaypointIndex)
			-- Check if the obstacle is further down the path
			if blockedWaypointIndex >= nextWaypointIndex then
				-- Stop detecting path blockage until path is re-computed
				blockedConnection:Disconnect()
				-- Call function to re-compute new path
				followPath(destination)
			end
		end)

		-- Detect when movement to next waypoint is complete
		if not reachedConnection then
			reachedConnection = humanoid.MoveToFinished:Connect(function(reached)
				if reached and nextWaypointIndex < #waypoints then
					-- Increase waypoint index and move to next waypoint
					nextWaypointIndex += 1
					humanoid:MoveTo(waypoints[nextWaypointIndex].Position)
				else
					reachedConnection:Disconnect()
					blockedConnection:Disconnect()
				end
			end)
		end

		-- Initially move to second waypoint (first waypoint is path start; skip it)
		nextWaypointIndex = 2
		humanoid:MoveTo(waypoints[nextWaypointIndex].Position)
	else
		warn("Path not computed!", errorMessage)
	end
end

function Validate(c)
	if not c then
		return false
	end
	local RSFood = RSConsumables:FindFirstChild(c.Name)
	if RSFood then
		if RSFood:GetAttribute("VIP") and RSFood:GetAttribute("VIP") == true then
			if MarketPlace:UserOwnsGamePassAsync(Player.UserId,817740770) then
				return true
			else
				return false
			end
		end
		return true
	end
	return false
end

function GetNumberAttributes(c)
	local count = 0
	for i,v in pairs(c:GetAttributes()) do
		count = count+1
	end
	return count
end

function GetAttributeFromNumber(c,n)
	local count = 0
	for i,v in pairs(c:GetAttributes()) do
		count = count+1
		if count == n then
			return v
		end
	end
end

function GetFood(handle)
	local Name 
	local RFood
	local VFood
	repeat wait()
		RFood = Consumables:GetChildren()[math.random(1,#Consumables:GetChildren())]
	until Validate(RFood)
	local GNC = GetNumberAttributes(RFood)
	if GNC > 1 then
		Name = GetAttributeFromNumber(RFood,math.random(1,GNC))
	else
		Name = RFood.Name
	end
	local tool = handle:FindFirstAncestorWhichIsA("Tool")
	if tool.Parent ~= Player.Character then
		Player.Character.Humanoid:EquipTool(tool)
	end
	return RFood
end


local MyFood = GetFood()
if MyFood then
	followPath(MyFood.WorldPivot.p)
end
